apiVersion: v1
kind: ConfigMap
metadata:
  name: capitalis-ai-ddns-updater
  namespace: capitalis 
data:
  update_dns.py: |
    import os
    import requests

    # Load API token and domains from environment variables
    API_TOKEN = os.getenv("GANDI_API_TOKEN")
    DOMAIN = os.getenv("DOMAIN", "")
    SUBDOMAINS = os.getenv("SUBDOMAINS", "").split(",")  # Supports multiple subdomains

    # List of services to get public IP
    IP_SERVICES = [
        "https://api64.ipify.org?format=json",
        "https://checkip.amazonaws.com",
        "https://ifconfig.me"
    ]

    # Gandi API headers: note the 'Authorization' header format
    HEADERS = {
        "Authorization": f"Bearer {API_TOKEN}",
        "Content-Type": "application/json"
    }

    def get_public_ip():
        """Fetches the current public IP."""
        for service in IP_SERVICES:
            try:
                response = requests.get(service, timeout=5)
                response.raise_for_status()
                # If the service returns JSON, use it; otherwise, use text
                if "json" in service:
                    return response.json()["ip"]
                else:
                    return response.text.strip()
            except requests.RequestException:
                continue
        return None

    def update_a_record(domain, subdomain, new_ip):
        """
        Updates the A record for the apex of the domain.
        For Gandi, the endpoint is:
          https://api.gandi.net/v5/livedns/domains/<domain>/records/<subdomain>/A
        """
        url = f"https://api.gandi.net/v5/livedns/domains/{domain}/records/{subdomain}/A"
        print(f"🔄 Updating: {url}...")

        payload = {
            "rrset_ttl": 300,         # TTL in seconds (adjust if needed)
            "rrset_values": [new_ip]    # New IP address as a list
        }
        response = requests.put(url, headers=HEADERS, json=payload)
        print(f"Response: {response.status_code} {response.text}")
    
        if 200 <= response.status_code < 300:
            print(f"✅ domain: {domain}, subdomain: {subdomain} updated to {new_ip}")
        else:
            print(f"❌ Failed to update domain: {domain}, subdomain: {subdomain}: {response.text}")

    def main():
        new_ip = get_public_ip()
        if not new_ip:
            print("❌ Could not determine public IP.")
            return
        print(f"New public IP: {new_ip}")

        domain = DOMAIN
        if not domain:
            print("❌ Domain not specified.")
            return

        print(f"🔄 Updating domain: {domain}...")
 
        for subdomain in SUBDOMAINS:
            subdomain = subdomain.strip()
            if not subdomain:
                continue
            print(f"🔄 Updating: {subdomain}.{domain}...")
            update_a_record(domain, subdomain, new_ip)

    if __name__ == "__main__":
        main()
